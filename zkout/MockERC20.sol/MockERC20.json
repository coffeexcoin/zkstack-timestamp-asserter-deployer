{"abi":[{"type":"function","name":"DOMAIN_SEPARATOR","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"name_","type":"string","internalType":"string"},{"name":"symbol_","type":"string","internalType":"string"},{"name":"decimals_","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"nonces","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"permit","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"v","type":"uint8","internalType":"uint8"},{"name":"r","type":"bytes32","internalType":"bytes32"},{"name":"s","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"","is_unlinked":false,"missing_libraries":[]},"assembly":"\t.text\n\t.file\t\"MockERC20.sol:MockERC20\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[7 + r0]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI0_0[0], r4, r5\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r5, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r4\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r2, r4\n\tjump.le\t@.BB0_14\n\tsub.s!\t@CPI0_4[0], r2, r4\n\tjump.gt\t@.BB0_20\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.eq\t@.BB0_136\n\tsub.s!\t@CPI0_8[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tsub.s!\t68, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[7]\n\tsub.s!\t@CPI0_19[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub.s!\tstack-[6], r3, r1\n\tjump.ge\t@.BB0_150\n.BB0_111:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_41[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t28, r0, r3\n.BB0_61:\n\tst.1\tr2, r3\n\tadd\t@CPI0_31[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_32[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_12[0], r2, r3\n\tjump.gt\t@.BB0_10\n\tsub.s!\t@CPI0_16[0], r2, r3\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_17[0], r2, r3\n\tjump.eq\t@.BB0_24\n\tsub.s!\t@CPI0_18[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tsub.s!\t100, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_42[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r5, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r6\n\tptr.add\tr1, r6, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_43[0], r3, r2\n\tjump.ge\t@.BB0_38\n\tadd\t31, r3, r7\n\tand\t@CPI0_50[0], r7, r7\n\tadd\t63, r7, r7\n\tand\t@CPI0_50[0], r7, r7\n\tsub.s!\t@CPI0_44[0], r7, r8\n\tjump.le\t@.BB0_41\n.BB0_38:\n\tadd\t@CPI0_39[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_40[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_14:\n\tsub.s!\t@CPI0_9[0], r2, r3\n\tjump.eq\t@.BB0_125\n\tsub.s!\t@CPI0_10[0], r2, r3\n\tjump.eq\t@.BB0_127\n\tsub.s!\t@CPI0_11[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tsub.s!\t36, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_19[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tadd\t8, r0, r1\n\tjump\t@.BB0_131\n.BB0_10:\n\tsub.s!\t@CPI0_13[0], r2, r3\n\tjump.eq\t@.BB0_99\n\tsub.s!\t@CPI0_14[0], r2, r3\n\tjump.eq\t@.BB0_103\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tsload\tr1, r1\n\tand\t255, r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_20:\n\tsub.s!\t@CPI0_5[0], r2, r3\n\tjump.eq\t@.BB0_155\n\tsub.s!\t@CPI0_6[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tsub.s!\t68, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_19[0], r2, r3\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_19[0], r3, r1\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r2\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[7]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\t64, r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_101\n.BB0_136:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r4\n\tsload\tr4, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r6\n\tand\t127, r6, r1\n\tadd.ne\tr6, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.eq\t@.BB0_138\n.BB0_64:\n\tadd\t@CPI0_39[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_40[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_22:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @abi_encode_string_storage, @DEFAULT_UNWIND\n\tsub.s\t128, r1, r2\n\tjump\t@.BB0_140\n.BB0_24:\n\tsub.s!\t68, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[7]\n\tsub.s!\t@CPI0_19[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[6]\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_34[0], r0, r4\n.BB0_30:\n\tcontext.caller\tr5\n.BB0_31:\n\tadd\tstack-[7], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r1\n\tadd\t1, r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_38[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_125:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_DOMAIN_SEPARATOR, @DEFAULT_UNWIND\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tsub.s!\t@CPI0_0[0], r2, r1\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_38[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_127:\n\tsub.s!\t36, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_19[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n.BB0_131:\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_101\n.BB0_99:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n.BB0_101:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_20[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_103:\n\tsub.s!\t100, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_19[0], r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[7]\n\tsub.s!\t@CPI0_19[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[5]\n\tst.1\t0, r3\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr3, r0, stack-[6]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tcontext.caller\tr2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tsub.s!\t@CPI0_51[0], r2, r1\n\tjump.ne\t@.BB0_110\n.BB0_115:\n\tst.1\t0, r3\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[4]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.lt\t@.BB0_111\n\tst.1\t0, r3\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r3\n\tsub.s\tstack-[5], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tadd\tstack-[5], r1, stack-[4]\n\tsub!\tstack-[4], r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tsub.s!\t1, r1, r1\n\tjump.eq\t@.BB0_120\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[6], r0, r5\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tadd\tstack-[5], r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_36[0], r0, r4\n\tjump\t@.BB0_31\n.BB0_155:\n\tsub.s!\t228, r5, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_19[0], r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_19[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t100, r1, r2\n\tld\tr2, r6\n\tptr.add.s\t68, r1, r2\n\tld\tr2, r2\n\tptr.add.s\t132, r1, r1\n\tld\tr1, r5\n\tsub.s!\t255, r5, r1\n\tjump.gt\t@.BB0_2\n\tadd\tr6, r0, stack-[7]\n\tadd\tr5, r0, stack-[3]\n\tadd\tr2, r0, stack-[4]\n\tadd\tr4, r0, stack-[5]\n\tadd\tr3, r0, stack-[6]\n\tadd\t@CPI0_21[0], r0, r1\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_22[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_161\n\tld\tr1, r1\n\tsub!\tstack-[7], r1, r1\n\tjump.ge\t@.BB0_164\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_35[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t23, r0, r3\n\tjump\t@.BB0_61\n.BB0_138:\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB0_141\n\tst.1\t0, r4\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_139\n\tadd\t@CPI0_37[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_144:\n\tsload\tr2, r5\n\tadd\t160, r4, r3\n\tst.1\tr3, r5\n\tadd\t1, r2, r2\n\tadd\t32, r4, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_144\n\tjump\t@.BB0_139\n.BB0_141:\n\tand\t@CPI0_52[0], r2, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t160, r0, r3\n\tadd.eq\t128, r0, r3\n.BB0_139:\n\tsub.s\t96, r3, r2\n.BB0_140:\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tsub\tr1, r3, r1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t96, r1, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\t@CPI0_0[0], r0, r3\n\tshl.s\t64, r3, r2\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_150:\n\tadd\tr3, r0, stack-[5]\n\tcontext.caller\tr1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[5], r0, r3\n\tsub.s\tstack-[6], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r1\n\tadd\tstack-[6], r1, r3\n\tsub!\tr3, r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_120\n\tadd\tr3, r0, stack-[5]\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_36[0], r0, r4\n\tjump\t@.BB0_30\n.BB0_41:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr4, r3, r4\n\tadd\t36, r4, r4\n\tsub!\tr4, r5, r4\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r4\n\tptr.add\tr1, r4, r4\n\tand\t31, r3, r6\n\tshr.s!\t5, r3, r7\n\tshl.s\t5, r7, r7\n\tjump.eq\t@.BB0_45\n\tadd\t160, r0, r8\n\tadd\t160, r7, r9\n\tptr.add\tr4, r0, r10\n.BB0_44:\n\tld.inc\tr10, r11, r10\n\tst.1.inc\tr8, r11, r8\n\tsub!\tr8, r9, r11\n\tjump.ne\t@.BB0_44\n.BB0_45:\n\tsub!\tr6, r0, r8\n\tjump.eq\t@.BB0_47\n\tptr.add\tr4, r7, r4\n\tshl.s\t3, r6, r6\n\tadd\t160, r7, r7\n\tld.1\tr7, r8\n\tshl\tr8, r6, r8\n\tshr\tr8, r6, r8\n\tld\tr4, r4\n\tsub\t256, r6, r6\n\tshr\tr4, r6, r4\n\tshl\tr4, r6, r4\n\tor\tr4, r8, r4\n\tst.1\tr7, r4\n.BB0_47:\n\tadd\t160, r3, r3\n\tst.1\tr3, r0\n\tptr.add.s\t36, r1, r3\n\tld\tr3, r7\n\tsub.s!\t@CPI0_42[0], r7, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r7, r3\n\tsub!\tr3, r5, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r7, r8\n\tptr.add\tr1, r8, r3\n\tld\tr3, r6\n\tsub.s!\t@CPI0_42[0], r6, r3\n\tjump.gt\t@.BB0_38\n\tadd\t31, r6, r3\n\tand\t@CPI0_50[0], r3, r3\n\tadd\t63, r3, r3\n\tand\t@CPI0_50[0], r3, r4\n\tld.1\t64, r3\n\tadd\tr3, r4, r4\n\tsub!\tr4, r3, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI0_42[0], r4, r10\n\tjump.gt\t@.BB0_38\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB0_38\n\tst.1\t64, r4\n\tst.1.inc\tr3, r6, r4\n\tadd\tr7, r6, r7\n\tadd\t36, r7, r7\n\tsub!\tr7, r5, r5\n\tjump.gt\t@.BB0_2\n\tadd\t32, r8, r5\n\tptr.add\tr1, r5, r7\n\tand\t31, r6, r5\n\tshr.s!\t5, r6, r8\n\tjump.eq\t@.BB0_56\n\tshl.s\t5, r8, r9\n\tadd\tr4, r9, r9\n\tptr.add\tr7, r0, r10\n\tadd\tr4, r0, r11\n.BB0_55:\n\tld.inc\tr10, r12, r10\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr11, r9, r12\n\tjump.ne\t@.BB0_55\n.BB0_56:\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB0_58\n\tshl.s\t5, r8, r8\n\tptr.add\tr7, r8, r7\n\tadd\tr4, r8, r8\n\tshl.s\t3, r5, r5\n\tld.1\tr8, r9\n\tshl\tr9, r5, r9\n\tshr\tr9, r5, r9\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r9, r5\n\tst.1\tr8, r5\n.BB0_58:\n\tadd\tr4, r6, r5\n\tst.1\tr5, r0\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tsub.s!\t255, r1, r5\n\tjump.gt\t@.BB0_2\n\tadd\t9, r0, r5\n\tsload\tr5, r5\n\tand!\t255, r5, r5\n\tjump.ne\t@.BB0_60\n\tld.1\t128, r5\n\tsub.s!\t@CPI0_42[0], r5, r6\n\tjump.gt\t@.BB0_38\n\tsload\tr0, r6\n\tand!\t1, r6, r8\n\tshr.s\t1, r6, r6\n\tand\t127, r6, r7\n\tadd.ne\tr6, r0, r7\n\tsub.s!\t31, r7, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\tsub!\tr8, r6, r6\n\tjump.ne\t@.BB0_64\n\tsub.s!\t32, r7, r6\n\tjump.lt\t@.BB0_68\n\tadd\t31, r5, r6\n\tshr.s\t5, r6, r6\n\tadd\t@CPI0_46[0], r6, r6\n\tsub.s!\t32, r5, r8\n\tadd.lt\t@CPI0_46[0], r0, r6\n\tst.1\t0, r0\n\tadd\t31, r7, r7\n\tshr.s\t5, r7, r7\n\tadd\t@CPI0_46[0], r7, r7\n\tsub!\tr6, r7, r8\n\tjump.ge\t@.BB0_68\n.BB0_69:\n\tsstore\tr6, r0\n\tadd\t1, r6, r6\n\tsub!\tr6, r7, r8\n\tjump.lt\t@.BB0_69\n.BB0_68:\n\tsub.s!\t31, r5, r6\n\tjump.le\t@.BB0_79\n\tand!\t@CPI0_50[0], r5, r7\n\tst.1\t0, r0\n\tjump.ne\t@.BB0_73\n\tadd\t160, r0, r8\n\tadd\t@CPI0_46[0], r0, r6\n\tjump\t@.BB0_76\n.BB0_161:\n\trevert\n.BB0_110:\n\tsub.s!\tstack-[5], r2, r1\n\tjump.lt\t@.BB0_111\n\tadd\tr2, r0, stack-[4]\n\tst.1\t0, r3\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tcontext.caller\tr2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[4], r0, r4\n\tsub.s\tstack-[5], r4, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tjump\t@.BB0_115\n.BB0_164:\n\tnear_call\tr0, @fun_DOMAIN_SEPARATOR, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r2\n\tst.1\t0, r2\n\tadd\t8, r0, r2\n\tst.1\t32, r2\n\tadd\tr1, r0, stack-[2]\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[6], r0, r4\n\tand!\t1, r2, r2\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[4], r0, r6\n\tjump.eq\t@.BB0_2\n\tld\tr1, r2\n\tsload\tr2, r1\n\tsub.s!\t@CPI0_51[0], r1, r3\n\tjump.ne\t@.BB0_166\n.BB0_120:\n\tadd\t@CPI0_39[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_40[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_166:\n\tadd\t1, r1, r3\n\tsstore\tr2, r3\n\tld.1\t64, r3\n\tadd\t192, r3, r2\n\tst.1\tr2, r7\n\tadd\t160, r3, r2\n\tst.1\tr2, r1\n\tadd\t128, r3, r1\n\tst.1\tr1, r6\n\tadd\t96, r3, r1\n\tst.1\tr1, r5\n\tadd\t64, r3, r1\n\tst.1\tr1, r4\n\tadd\t192, r0, r1\n\tst.1.inc\tr3, r1, r1\n\tadd\t@CPI0_24[0], r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_25[0], r3, r2\n\tjump.gt\t@.BB0_38\n\tadd\t224, r3, r2\n\tadd\tr2, r0, stack-[7]\n\tst.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tadd\tr3, r0, stack-[1]\n\tld.1\tr3, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[1], r0, r3\n\tadd\t290, r3, r2\n\tst.1\tr2, r1\n\tadd\t256, r3, r1\n\tadd\t@CPI0_27[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t258, r3, r2\n\tadd\tstack-[2], r0, r4\n\tst.1\tr2, r4\n\tadd\t66, r0, r2\n\tadd\tstack-[7], r0, r4\n\tst.1\tr4, r2\n\tsub.s!\t@CPI0_28[0], r3, r2\n\tjump.gt\t@.BB0_38\n\tadd\t352, r3, r3\n\tadd\tr3, r0, stack-[2]\n\tsub.s!\tstack-[7], r3, r2\n\tjump.lt\t@.BB0_38\n\tadd\tstack-[2], r0, r2\n\tst.1\t64, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tadd\tstack-[7], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[3], r0, r2\n\tjump.eq\t@.BB0_2\n\tand\t255, r2, r2\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r5\n\tst.1\tr5, r1\n\tadd\tstack-[1], r0, r4\n\tadd\t384, r4, r1\n\tst.1\tr1, r2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tptr.add.s\t164, r1, r2\n\tld\tr2, r2\n\tadd\t416, r4, r3\n\tst.1\tr3, r2\n\tadd\t448, r4, r2\n\tptr.add.s\t196, r1, r1\n\tld\tr1, r1\n\tst.1\tr2, r1\n\tsub.s!\t@CPI0_0[0], r5, r1\n\tadd.ge\t@CPI0_0[0], r0, r5\n\tshl.s\t64, r5, r1\n\tst.1\t0, r0\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_29[0], r1, r1\n\tadd\t1, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r4\n\tjump.eq\t@.BB0_174\n\tptr.add\tr1, r0, r6\n\tadd\tr0, r0, r7\n.BB0_173:\n\tld.inc\tr6, r8, r6\n\tsub!\tr7, r0, r9\n\tst.1.inc\tr7, r8, r7\n\tjump.ne\t@.BB0_173\n.BB0_174:\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB0_176\n\tshl.s\t3, r5, r5\n\tshl.s\t5, r4, r4\n\tld.1\tr4, r6\n\tshl\tr6, r5, r6\n\tshr\tr6, r5, r6\n\tptr.add\tr1, r4, r7\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r6, r5\n\tst.1\tr4, r5\n.BB0_176:\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_177\n\tld.1\t0, r1\n\tand!\t@CPI0_19[0], r1, r1\n\tjump.eq\t@.BB0_185\n\tsub.s!\tstack-[6], r1, r1\n\tjump.ne\t@.BB0_185\n\tadd\tstack-[6], r0, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[5], r0, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r3\n\tadd\tstack-[5], r0, r6\n\tadd\tstack-[6], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsstore\tr1, r3\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_33[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_34[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_60:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_45[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t19, r0, r3\n\tjump\t@.BB0_61\n.BB0_177:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tshl.s\t5, r5, r5\n\tjump.eq\t@.BB0_180\n\tadd\tr2, r5, r6\n\tptr.add\tr1, r0, r7\n\tadd\tr2, r0, r8\n.BB0_179:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r6, r9\n\tjump.ne\t@.BB0_179\n.BB0_180:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_182\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_182:\n\tshl.s\t96, r3, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t64, r2, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_185:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_30[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t14, r0, r3\n\tjump\t@.BB0_61\n.BB0_79:\n\tsub!\tr5, r0, r6\n\tadd\tr0, r0, r6\n\tjump.eq\t@.BB0_81\n\tld.1\t160, r6\n.BB0_81:\n\tshl.s\t3, r5, r7\n\tshr\t@CPI0_51[0], r7, r7\n\txor\t@CPI0_51[0], r7, r7\n\tand\tr6, r7, r6\n\tshl.s\t1, r5, r5\n\tor\tr6, r5, r5\n\tjump\t@.BB0_70\n.BB0_73:\n\tadd\t@CPI0_46[0], r0, r6\n\tadd\t32, r0, r9\n\tsub.s\t1, r7, r8\n\tshr.s\t5, r8, r8\n\tadd\t@CPI0_47[0], r8, r8\n.BB0_74:\n\tadd\tr9, r0, r10\n\tadd\t128, r10, r9\n\tld.1\tr9, r9\n\tsstore\tr6, r9\n\tadd\t32, r10, r9\n\tadd\t1, r6, r6\n\tsub!\tr6, r8, r11\n\tjump.ne\t@.BB0_74\n\tadd\t160, r10, r8\n.BB0_76:\n\tsub!\tr7, r5, r7\n\tjump.ge\t@.BB0_78\n\tshl.s\t3, r5, r7\n\tand\t248, r7, r7\n\tshr\t@CPI0_51[0], r7, r7\n\txor\t@CPI0_51[0], r7, r7\n\tld.1\tr8, r8\n\tand\tr8, r7, r7\n\tsstore\tr6, r7\n.BB0_78:\n\tshl.s\t1, r5, r5\n\tor\t1, r5, r5\n.BB0_70:\n\tsstore\tr0, r5\n\tld.1\tr3, r6\n\tsub.s!\t@CPI0_42[0], r6, r5\n\tjump.gt\t@.BB0_38\n\tadd\t1, r0, r5\n\tsload\tr5, r8\n\tand!\t1, r8, r7\n\tshr.s\t1, r8, r9\n\tand\t127, r9, r7\n\tadd.ne\tr9, r0, r7\n\tsub.s!\t31, r7, r9\n\tadd\t0, r0, r9\n\tadd.gt\t1, r0, r9\n\txor\tr8, r9, r8\n\tand!\t1, r8, r8\n\tjump.ne\t@.BB0_64\n\tsub.s!\t32, r7, r8\n\tjump.lt\t@.BB0_86\n\tadd\t1, r0, r8\n\tst.1\t0, r8\n\tadd\t31, r6, r8\n\tshr.s\t5, r8, r8\n\tadd\t@CPI0_37[0], r8, r8\n\tsub.s!\t32, r6, r9\n\tadd.lt\t@CPI0_37[0], r0, r8\n\tadd\t31, r7, r7\n\tshr.s\t5, r7, r7\n\tadd\t@CPI0_37[0], r7, r7\n\tsub!\tr8, r7, r9\n\tjump.ge\t@.BB0_86\n.BB0_87:\n\tsstore\tr8, r0\n\tadd\t1, r8, r8\n\tsub!\tr8, r7, r9\n\tjump.lt\t@.BB0_87\n.BB0_86:\n\tsub.s!\t31, r6, r7\n\tjump.le\t@.BB0_96\n\tst.1\t0, r5\n\tand!\t@CPI0_50[0], r6, r7\n\tjump.ne\t@.BB0_91\n\tadd\t32, r0, r4\n\tadd\t@CPI0_37[0], r0, r2\n\tjump\t@.BB0_93\n.BB0_96:\n\tsub!\tr6, r0, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_98\n\tld.1\tr4, r2\n.BB0_98:\n\tshl.s\t3, r6, r3\n\tshr\t@CPI0_51[0], r3, r3\n\txor\t@CPI0_51[0], r3, r3\n\tand\tr2, r3, r2\n\tshl.s\t1, r6, r3\n\tjump\t@.BB0_88\n.BB0_91:\n\tadd\t@CPI0_37[0], r0, r2\n\tadd\t32, r0, r4\n\tsub.s\t1, r7, r8\n\tshr.s\t5, r8, r8\n\tadd\t@CPI0_48[0], r8, r8\n.BB0_92:\n\tadd\tr4, r3, r9\n\tld.1\tr9, r9\n\tsstore\tr2, r9\n\tadd\t32, r4, r4\n\tadd\t1, r2, r2\n\tsub!\tr2, r8, r9\n\tjump.ne\t@.BB0_92\n.BB0_93:\n\tsub!\tr7, r6, r7\n\tjump.ge\t@.BB0_95\n\tshl.s\t3, r6, r7\n\tand\t248, r7, r7\n\tshr\t@CPI0_51[0], r7, r7\n\txor\t@CPI0_51[0], r7, r7\n\tadd\tr4, r3, r3\n\tld.1\tr3, r3\n\tand\tr3, r7, r3\n\tsstore\tr2, r3\n.BB0_95:\n\tshl.s\t1, r6, r2\n\tadd\tr5, r0, r3\n.BB0_88:\n\tor\tr2, r3, r2\n\tsstore\tr5, r2\n\tadd\t2, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_52[0], r3, r3\n\tand\t255, r1, r1\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\t@CPI0_49[0], r0, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\t6, r0, r2\n\tsstore\tr2, r1\n\tnear_call\tr0, @fun_computeDomainSeparator, @DEFAULT_UNWIND\n\tadd\t7, r0, r2\n\tsstore\tr2, r1\n\tadd\t9, r0, r2\n\tsload\tr2, r1\n\tand\t@CPI0_52[0], r1, r1\n\tor\t1, r1, r1\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1.inc\tr2, r2, r3\n\tst.1\tr4, r2\n\tadd\t64, r1, r1\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r2, r3\n\tst.1\tr3, r0\n\tadd\t31, r2, r2\n\tand\t@CPI1_0[0], r2, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nfinalize_allocation:\n.func_begin2:\n\tadd\t31, r2, r2\n\tand\t@CPI2_3[0], r2, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r3\n\tjump.gt\t@.BB2_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_2\n\tst.1\t64, r1\n\tret\n.BB2_2:\n\tadd\t@CPI2_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nabi_encode_string_storage:\n.func_begin3:\n\tsload\tr0, r3\n\tand!\t1, r3, r4\n\tshr.s\t1, r3, r5\n\tand\t127, r5, r2\n\tadd.ne\tr5, r0, r2\n\tsub.s!\t31, r2, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\tsub!\tr4, r5, r5\n\tjump.ne\t@.BB3_1\n\tst.1.inc\tr1, r2, r1\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB3_4\n\tst.1\t0, r0\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB3_6\n\tadd\t@CPI3_0[0], r0, r4\n\tadd\tr0, r0, r3\n.BB3_8:\n\tadd\tr1, r3, r5\n\tsload\tr4, r6\n\tst.1\tr5, r6\n\tadd\t1, r4, r4\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r5\n\tjump.lt\t@.BB3_8\n\tadd\tr1, r3, r1\n\tret\n.BB3_4:\n\tand\t@CPI3_3[0], r3, r3\n\tst.1\tr1, r3\n\tsub!\tr2, r0, r2\n\tadd\t32, r0, r3\n\tadd.eq\t0, r0, r3\n\tadd\tr1, r3, r1\n\tret\n.BB3_6:\n\tadd\tr0, r0, r3\n\tadd\tr1, r3, r1\n\tret\n.BB3_1:\n\tadd\t@CPI3_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nfun_DOMAIN_SEPARATOR:\n.func_begin4:\n\tnop\tstack+=[2 + r0]\n\tadd\t6, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t@CPI4_0[0], r0, r1\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tsub.s!\tstack-[2], r1, r1\n\tjump.ne\t@.BB4_3\n\tadd\t7, r0, r1\n\tsload\tr1, r1\n\tret\n.BB4_3:\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr5, r1, r1\n\tjump.ne\t@.BB4_4\n\tld.1\t64, r1\n\tst.1.inc\tr1, r3, r2\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB4_7\n\tst.1\t0, r0\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB4_9\n\tadd\t@CPI4_3[0], r0, r5\n\tadd\tr0, r0, r4\n.BB4_11:\n\tadd\tr4, r2, r6\n\tsload\tr5, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r6\n\tjump.lt\t@.BB4_11\n\tjump\t@.BB4_12\n.BB4_7:\n\tand\t@CPI4_11[0], r4, r4\n\tst.1\tr2, r4\n\tsub!\tr3, r0, r3\n\tadd\t32, r0, r4\n\tadd.eq\t0, r0, r4\n\tjump\t@.BB4_12\n.BB4_9:\n\tadd\tr0, r0, r4\n.BB4_12:\n\tadd\t63, r4, r3\n\tand\t@CPI4_12[0], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI4_4[0], r3, r5\n\tjump.gt\t@.BB4_14\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB4_14\n\tst.1\t64, r3\n\tsub.s!\t@CPI4_1[0], r2, r3\n\tadd.ge\t@CPI4_1[0], r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI4_1[0], r1, r3\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_1[0], r2, r3\n\tadd.ge\t@CPI4_1[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_16\n\tld\tr1, r1\n\tld.1\t64, r4\n\tadd\t96, r4, r2\n\tadd\t@CPI4_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r4, r2\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[2]\n\tadd\t32, r4, r2\n\tadd\t@CPI4_7[0], r0, r1\n\tadd\tr2, r0, stack-[1]\n\tst.1\tr2, r1\n\tadd\t@CPI4_0[0], r0, r1\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r4\n\tadd\t160, r4, r2\n\tcontext.this\tr3\n\tst.1\tr2, r3\n\tadd\t128, r4, r2\n\tst.1\tr2, r1\n\tadd\t160, r0, r1\n\tst.1\tr4, r1\n\tsub.s!\t@CPI4_8[0], r4, r1\n\tjump.gt\t@.BB4_14\n\tadd\t192, r4, r1\n\tst.1\t64, r1\n\tadd\tstack-[1], r0, r2\n\tsub.s!\t@CPI4_1[0], r2, r1\n\tadd.ge\t@CPI4_1[0], r0, r2\n\tshl.s\t64, r2, r1\n\tld.1\tr4, r2\n\tsub.s!\t@CPI4_1[0], r2, r3\n\tadd.ge\t@CPI4_1[0], r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_1[0], r2, r3\n\tadd.ge\t@CPI4_1[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_5[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_16\n\tld\tr1, r1\n\tret\n.BB4_1:\n\trevert\n.BB4_14:\n\tadd\t@CPI4_9[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_10[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_16:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_4:\n\tadd\t@CPI4_9[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_10[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_computeDomainSeparator:\n.func_begin5:\n\tnop\tstack+=[2 + r0]\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr5, r1, r1\n\tjump.ne\t@.BB5_1\n\tld.1\t64, r1\n\tst.1.inc\tr1, r3, r2\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB5_4\n\tst.1\t0, r0\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB5_6\n\tadd\t@CPI5_0[0], r0, r5\n\tadd\tr0, r0, r4\n.BB5_8:\n\tadd\tr4, r2, r6\n\tsload\tr5, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r6\n\tjump.lt\t@.BB5_8\n\tjump\t@.BB5_9\n.BB5_4:\n\tand\t@CPI5_11[0], r4, r4\n\tst.1\tr2, r4\n\tsub!\tr3, r0, r3\n\tadd\t32, r0, r4\n\tadd.eq\t0, r0, r4\n\tjump\t@.BB5_9\n.BB5_6:\n\tadd\tr0, r0, r4\n.BB5_9:\n\tadd\t63, r4, r3\n\tand\t@CPI5_12[0], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI5_1[0], r3, r5\n\tjump.gt\t@.BB5_11\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB5_11\n\tst.1\t64, r3\n\tsub.s!\t@CPI5_2[0], r2, r3\n\tadd.ge\t@CPI5_2[0], r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI5_2[0], r1, r3\n\tadd.ge\t@CPI5_2[0], r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_2[0], r2, r3\n\tadd.ge\t@CPI5_2[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_13\n\tld\tr1, r1\n\tld.1\t64, r4\n\tadd\t96, r4, r2\n\tadd\t@CPI5_4[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r4, r2\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[2]\n\tadd\t32, r4, r2\n\tadd\t@CPI5_5[0], r0, r1\n\tadd\tr2, r0, stack-[1]\n\tst.1\tr2, r1\n\tadd\t@CPI5_6[0], r0, r1\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_2[0], r1, r2\n\tadd.ge\t@CPI5_2[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_7[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_15\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r4\n\tadd\t160, r4, r2\n\tcontext.this\tr3\n\tst.1\tr2, r3\n\tadd\t128, r4, r2\n\tst.1\tr2, r1\n\tadd\t160, r0, r1\n\tst.1\tr4, r1\n\tsub.s!\t@CPI5_8[0], r4, r1\n\tjump.gt\t@.BB5_11\n\tadd\t192, r4, r1\n\tst.1\t64, r1\n\tadd\tstack-[1], r0, r2\n\tsub.s!\t@CPI5_2[0], r2, r1\n\tadd.ge\t@CPI5_2[0], r0, r2\n\tshl.s\t64, r2, r1\n\tld.1\tr4, r2\n\tsub.s!\t@CPI5_2[0], r2, r3\n\tadd.ge\t@CPI5_2[0], r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_2[0], r2, r3\n\tadd.ge\t@CPI5_2[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_13\n\tld\tr1, r1\n\tret\n.BB5_11:\n\tadd\t@CPI5_9[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_10[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_13:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_1:\n\tadd\t@CPI5_9[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_10[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_15:\n\trevert\n.func_end5:\n\n__cxa_throw:\n.func_begin6:\n\trevert\n.func_end6:\n\n__sha3:\n.func_begin7:\n\tsub.s!\t@CPI7_0[0], r1, r3\n\tadd.ge\t@CPI7_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI7_0[0], r2, r3\n\tadd.ge\t@CPI7_0[0], r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_0[0], r2, r3\n\tadd.ge\t@CPI7_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI7_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_2\n\tld\tr1, r1\n\tret\n.BB7_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\n__system_request:\n.func_begin8:\n\tst.2\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI8_0[0], r1, r2\n\tadd.ge\t@CPI8_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI8_1[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB8_2\n\tld\tr1, r1\n\tret\n.BB8_2:\n\trevert\n.func_end8:\n\n__farcall:\n.func_begin9:\n.tmp0:\n\tfar_call\tr1, r2, @.BB9_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB9_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end9:\n\n__staticcall:\n.func_begin10:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB10_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB10_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end10:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n\t.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_1:\nCPI5_2:\nCPI7_0:\nCPI8_0:\n\t.cell\t4294967295\nCPI0_1:\n\t.cell\t53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell\t910484756\nCPI0_3:\n\t.cell\t2514000704\nCPI0_4:\n\t.cell\t3573918926\nCPI0_5:\n\t.cell\t3573918927\nCPI0_6:\n\t.cell\t3714247998\nCPI0_7:\n\t.cell\t2514000705\nCPI0_8:\n\t.cell\t2835717307\nCPI0_9:\n\t.cell\t910484757\nCPI0_10:\n\t.cell\t1889567281\nCPI0_11:\n\t.cell\t2127478272\nCPI0_12:\n\t.cell\t404098524\nCPI0_13:\n\t.cell\t404098525\nCPI0_14:\n\t.cell\t599290589\nCPI0_15:\n\t.cell\t826074471\nCPI0_16:\n\t.cell\t117300739\nCPI0_17:\n\t.cell\t157198259\nCPI0_18:\n\t.cell\t371521222\nCPI0_19:\n\t.cell\t1461501637330902918203684832716283019655932542975\nCPI0_20:\n\t.cell\t2535301202817642044428229017600\nCPI0_21:\n\t.cell\t54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI0_22:\nCPI4_2:\nCPI5_7:\nCPI8_1:\n\t.cell\t904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_23:\n\t.cell\t904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_24:\n\t.cell\t49955707469362902507454157297736832118868343942642399513960811609542965143241\nCPI0_25:\n\t.cell\t18446744073709551391\nCPI0_26:\nCPI4_5:\nCPI5_3:\nCPI7_1:\n\t.cell\t904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_27:\n\t.cell\t11309588061646438093662687302255421419811724423900836950936401294474059186176\nCPI0_28:\n\t.cell\t18446744073709551263\nCPI0_29:\n\t.cell\t10141204801825835211973625643008\nCPI0_30:\n\t.cell\t33157247328247392177372772381507990942257504435990715847000511638287595601920\nCPI0_31:\n\t.cell\t3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_32:\n\t.cell\t7922816251426433759354395033600\nCPI0_33:\n\t.cell\t904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_34:\n\t.cell\t-52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_35:\n\t.cell\t36307508360969855760600683141874677693495401447397650339409915876716639682560\nCPI0_36:\n\t.cell\t-15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI0_37:\n\t.cell\t-35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_38:\n\t.cell\t2535301200456458802993406410752\nCPI0_39:\nCPI2_1:\nCPI3_1:\nCPI4_9:\nCPI5_9:\n\t.cell\t35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_40:\nCPI2_2:\nCPI3_2:\nCPI4_10:\nCPI5_10:\n\t.cell\t2852213850513516153367582212096\nCPI0_41:\n\t.cell\t31354931781638678601025225372054322825195139916995069304146873149637282234368\nCPI0_42:\nCPI2_0:\nCPI4_4:\nCPI5_1:\n\t.cell\t18446744073709551615\nCPI0_43:\n\t.cell\t18446744073709551616\nCPI0_44:\n\t.cell\t18446744073709551487\nCPI0_45:\n\t.cell\t29535183345145645464477851197593903596241110250713156662292127721300527415296\nCPI0_46:\nCPI3_0:\nCPI4_3:\nCPI5_0:\n\t.cell\t18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_47:\n\t.cell\t18569430475105882587588266137607568536673111973893317399460219858819262702948\nCPI0_48:\n\t.cell\t-35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_49:\nCPI4_0:\nCPI5_6:\n\t.cell\t-45892047197499416867505091379861151366373029554911521591129889233172042914037\nCPI0_50:\nCPI1_0:\nCPI2_3:\nCPI4_12:\nCPI5_12:\n\t.cell\t-32\nCPI0_51:\n\t.cell\t-1\nCPI0_52:\nCPI3_3:\nCPI4_11:\nCPI5_11:\n\t.cell\t-256\nCPI4_6:\nCPI5_4:\n\t.cell\t-25048606950485655920330026002385074919936174626890048066671851289183138378810\nCPI4_7:\nCPI5_5:\n\t.cell\t-52716064676786082020591434766380454285206545917311776621925683646084292198385\nCPI4_8:\nCPI5_8:\n\t.cell\t18446744073709551423\n","metadata":{"llvm_options":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.3a2587f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set, where `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"initialize(string,string,uint8)\":{\"details\":\"To hide constructor warnings across solc versions due to different constructor visibility requirements and syntaxes, we add an initialization function that can be called only once.\"}},\"stateVariables\":{\"initialized\":{\"details\":\"A bool to track whether the contract has been initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Returns the remaining number of tokens that `spender` is allowed to spend on behalf of `owner`\"},\"approve(address,uint256)\":{\"notice\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\"},\"decimals()\":{\"notice\":\"Returns the decimals places of the token.\"},\"name()\":{\"notice\":\"Returns the name of the token.\"},\"symbol()\":{\"notice\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"notice\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"notice\":\"Moves `amount` tokens from the caller's account to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance.\"}},\"notice\":\"This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/forge-std/src/mocks/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":"1.0.1","zk_version":"1.5.0"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 13:\"lib/forge-std/src/interfaces/IERC20.sol\", 16:\"lib/forge-std/src/mocks/MockERC20.sol\"\nobject \"MockERC20_22799\" {\n    code {\n        {\n            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"MockERC20_22799_deployed\")\n            codecopy(_1, dataoffset(\"MockERC20_22799_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 16:\"lib/forge-std/src/mocks/MockERC20.sol\"\n    object \"MockERC20_22799_deployed\" {\n        code {\n            {\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        finalize_allocation(_1, sub(abi_encode_string_storage(_1), _1))\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_string(memPos, _1), memPos))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value := calldataload(36)\n                        mstore(0, /** @src 16:3167:3177  \"msg.sender\" */ caller())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(32, /** @src 16:3156:3166  \"_allowance\" */ 0x05)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let _4 := keccak256(0, _2)\n                        let _5 := and(value0, sub(shl(160, 1), 1))\n                        mstore(0, _5)\n                        mstore(32, _4)\n                        sstore(keccak256(0, _2), value)\n                        /// @src 16:3212:3249  \"Approval(msg.sender, spender, amount)\"\n                        let _6 := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ mload(_2)\n                        mstore(_6, value)\n                        /// @src 16:3212:3249  \"Approval(msg.sender, spender, amount)\"\n                        log3(_6, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 32, /** @src 16:3212:3249  \"Approval(msg.sender, spender, amount)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 16:3167:3177  \"msg.sender\" */ caller(), /** @src 16:3212:3249  \"Approval(msg.sender, spender, amount)\" */ _5)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, 1)\n                        return(memPos_1, 32)\n                    }\n                    case 0x1624f6c6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let offset := calldataload(_3)\n                        let _7 := 0xffffffffffffffff\n                        if gt(offset, _7) { revert(0, 0) }\n                        let value0_1 := abi_decode_string(add(_3, offset), calldatasize())\n                        let offset_1 := calldataload(36)\n                        if gt(offset_1, _7) { revert(0, 0) }\n                        let value1 := abi_decode_string(add(_3, offset_1), calldatasize())\n                        let value_1 := calldataload(68)\n                        let _8 := and(value_1, 0xff)\n                        if iszero(eq(value_1, _8)) { revert(0, 0) }\n                        if iszero(/** @src 16:2610:2622  \"!initialized\" */ iszero(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ and(sload(/** @src 16:2611:2622  \"initialized\" */ 0x09), /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0xff)))\n                        {\n                            let memPtr := mload(_2)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, _3), 32)\n                            mstore(add(memPtr, 36), 19)\n                            mstore(add(memPtr, 68), \"ALREADY_INITIALIZED\")\n                            revert(memPtr, 100)\n                        }\n                        let newLen := mload(value0_1)\n                        if gt(newLen, _7)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, 36)\n                        }\n                        let _9 := extract_byte_array_length(sload(0))\n                        let _10 := 31\n                        if gt(_9, _10)\n                        {\n                            mstore(0, 0)\n                            let _11 := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let deleteStart := add(_11, shr(5, add(newLen, _10)))\n                            if lt(newLen, 32) { deleteStart := _11 }\n                            let _12 := add(_11, shr(5, add(_9, _10)))\n                            let start := deleteStart\n                            for { } lt(start, _12) { start := add(start, 1) }\n                            { sstore(start, 0) }\n                        }\n                        let srcOffset := 0\n                        srcOffset := 32\n                        switch gt(newLen, _10)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(0, 0)\n                            let dstPtr := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := 0\n                            for { } lt(i, loopEnd) { i := add(i, 32) }\n                            {\n                                sstore(dstPtr, mload(add(value0_1, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, 32)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(value0_1, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(0, add(shl(1, newLen), 1))\n                        }\n                        default {\n                            let value_2 := 0\n                            if newLen\n                            {\n                                value_2 := mload(add(value0_1, srcOffset))\n                            }\n                            sstore(0, or(and(value_2, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                        }\n                        let newLen_1 := mload(value1)\n                        if gt(newLen_1, _7)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, 36)\n                        }\n                        /// @src 16:2680:2697  \"_symbol = symbol_\"\n                        let _13 := 0x01\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let _14 := extract_byte_array_length(sload(/** @src 16:2680:2697  \"_symbol = symbol_\" */ _13))\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        if gt(_14, _10)\n                        {\n                            mstore(0, /** @src 16:2680:2697  \"_symbol = symbol_\" */ _13)\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            let _15 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let deleteStart_1 := add(_15, shr(5, add(newLen_1, _10)))\n                            if lt(newLen_1, 32) { deleteStart_1 := _15 }\n                            let _16 := add(_15, shr(5, add(_14, _10)))\n                            let start_1 := deleteStart_1\n                            for { }\n                            lt(start_1, _16)\n                            {\n                                start_1 := add(start_1, /** @src 16:2680:2697  \"_symbol = symbol_\" */ _13)\n                            }\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            { sstore(start_1, 0) }\n                        }\n                        let srcOffset_1 := 0\n                        srcOffset_1 := 32\n                        switch gt(newLen_1, _10)\n                        case 1 {\n                            let loopEnd_1 := and(newLen_1, not(31))\n                            mstore(0, /** @src 16:2680:2697  \"_symbol = symbol_\" */ _13)\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            let dstPtr_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let i_1 := 0\n                            for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                            {\n                                sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                                dstPtr_1 := add(dstPtr_1, /** @src 16:2680:2697  \"_symbol = symbol_\" */ _13)\n                                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                                srcOffset_1 := add(srcOffset_1, 32)\n                            }\n                            if lt(loopEnd_1, newLen_1)\n                            {\n                                let lastValue_1 := mload(add(value1, srcOffset_1))\n                                sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                            }\n                            sstore(/** @src 16:2680:2697  \"_symbol = symbol_\" */ _13, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ add(shl(/** @src 16:2680:2697  \"_symbol = symbol_\" */ _13, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ newLen_1), /** @src 16:2680:2697  \"_symbol = symbol_\" */ _13))\n                        }\n                        default /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        {\n                            let value_3 := 0\n                            if newLen_1\n                            {\n                                value_3 := mload(add(value1, srcOffset_1))\n                            }\n                            sstore(/** @src 16:2680:2697  \"_symbol = symbol_\" */ _13, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ or(and(value_3, not(shr(shl(3, newLen_1), not(0)))), shl(/** @src 16:2680:2697  \"_symbol = symbol_\" */ _13, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ newLen_1)))\n                        }\n                        let _17 := not(255)\n                        sstore(/** @src 16:2707:2728  \"_decimals = decimals_\" */ 0x02, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ or(and(sload(/** @src 16:2707:2728  \"_decimals = decimals_\" */ 0x02), /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _17), _8))\n                        sstore(/** @src 16:2739:2772  \"INITIAL_CHAIN_ID = _pureChainId()\" */ 0x06, /** @src 16:7884:7937  \"assembly {...\" */ chainid())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        sstore(/** @src 16:2782:2833  \"INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator()\" */ 0x07, /** @src 16:2809:2833  \"computeDomainSeparator()\" */ fun_computeDomainSeparator())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        sstore(/** @src 16:2611:2622  \"initialized\" */ 0x09, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ or(and(sload(/** @src 16:2611:2622  \"initialized\" */ 0x09), /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _17), /** @src 16:2680:2697  \"_symbol = symbol_\" */ _13))\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        return(0, 0)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _18 := sload(/** @src 16:1403:1415  \"_totalSupply\" */ 0x03)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, _18)\n                        return(memPos_2, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        let value1_1 := abi_decode_address_8758()\n                        let value_4 := calldataload(68)\n                        let _19 := sub(shl(160, 1), 1)\n                        let _20 := and(value0_2, _19)\n                        mstore(0, _20)\n                        let _21 := 32\n                        mstore(_21, /** @src 16:3709:3719  \"_allowance\" */ 0x05)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let dataSlot := keccak256(0, _2)\n                        mstore(0, /** @src 16:3726:3736  \"msg.sender\" */ caller())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(_21, dataSlot)\n                        let _22 := sload(keccak256(0, _2))\n                        /// @src 16:3784:3864  \"if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount)\"\n                        if /** @src 16:3788:3810  \"allowed != ~uint256(0)\" */ iszero(eq(_22, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ not(0)))\n                        /// @src 16:3784:3864  \"if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount)\"\n                        {\n                            /// @src 16:3843:3864  \"_sub(allowed, amount)\"\n                            let _23 := fun_sub(_22, value_4)\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            mstore(0, _20)\n                            mstore(_21, /** @src 16:3709:3719  \"_allowance\" */ 0x05)\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            let _24 := keccak256(0, _2)\n                            mstore(0, /** @src 16:3726:3736  \"msg.sender\" */ caller())\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            mstore(_21, _24)\n                            sstore(keccak256(0, _2), _23)\n                        }\n                        mstore(0, _20)\n                        mstore(_21, _3)\n                        /// @src 16:3894:3924  \"_sub(_balanceOf[from], amount)\"\n                        let _25 := fun_sub(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ sload(keccak256(0, _2)), /** @src 16:3894:3924  \"_sub(_balanceOf[from], amount)\" */ value_4)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(0, _20)\n                        mstore(_21, _3)\n                        sstore(keccak256(0, _2), _25)\n                        let _26 := and(value1_1, _19)\n                        mstore(0, _26)\n                        /// @src 16:3951:3979  \"_add(_balanceOf[to], amount)\"\n                        let _27 := fun_add(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ sload(keccak256(0, _2)), /** @src 16:3951:3979  \"_add(_balanceOf[to], amount)\" */ value_4)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(0, _26)\n                        mstore(_21, _3)\n                        sstore(keccak256(0, _2), _27)\n                        /// @src 16:3995:4021  \"Transfer(from, to, amount)\"\n                        let _28 := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ mload(_2)\n                        mstore(_28, value_4)\n                        /// @src 16:3995:4021  \"Transfer(from, to, amount)\"\n                        log3(_28, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _21, /** @src 16:3995:4021  \"Transfer(from, to, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _20, _26)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, 1)\n                        return(memPos_3, _21)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_5 := and(sload(/** @src 16:953:962  \"_decimals\" */ 0x02), /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0xff)\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, value_5)\n                        return(memPos_4, 32)\n                    }\n                    case 0x3644e515 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := fun_DOMAIN_SEPARATOR()\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, ret)\n                        return(memPos_5, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, _3)\n                        let _29 := sload(keccak256(0, _2))\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, _29)\n                        return(memPos_6, 32)\n                    }\n                    case 0x7ecebe00 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 16:1970:2011  \"mapping(address => uint256) public nonces\" */ 8)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let _30 := sload(keccak256(0, _2))\n                        let memPos_7 := mload(_2)\n                        mstore(memPos_7, _30)\n                        return(memPos_7, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr_1 := mload(_2)\n                        let ret_1 := 0\n                        /// @src 16:857:864  \"_symbol\"\n                        let _31 := 0x01\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let slotValue := sload(/** @src 16:857:864  \"_symbol\" */ 0x01)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr_1, length)\n                        let _32 := 0x20\n                        switch and(slotValue, /** @src 16:857:864  \"_symbol\" */ 0x01)\n                        case /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0 {\n                            mstore(add(memPtr_1, 0x20), and(slotValue, not(255)))\n                            ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length)))), 0x20)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 16:857:864  \"_symbol\" */ 0x01)\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            let dataPos := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                            let i_2 := 0\n                            for { } lt(i_2, length) { i_2 := add(i_2, _32) }\n                            {\n                                mstore(add(add(memPtr_1, i_2), _32), sload(dataPos))\n                                dataPos := add(dataPos, /** @src 16:857:864  \"_symbol\" */ _31)\n                            }\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            ret_1 := add(add(memPtr_1, i_2), 0x20)\n                        }\n                        finalize_allocation(memPtr_1, sub(ret_1, memPtr_1))\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_string(memPos_8, memPtr_1), memPos_8))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value_6 := calldataload(36)\n                        mstore(0, /** @src 16:3420:3430  \"msg.sender\" */ caller())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(32, _3)\n                        /// @src 16:3404:3440  \"_sub(_balanceOf[msg.sender], amount)\"\n                        let _33 := fun_sub(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ sload(keccak256(0, _2)), /** @src 16:3404:3440  \"_sub(_balanceOf[msg.sender], amount)\" */ value_6)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(0, /** @src 16:3420:3430  \"msg.sender\" */ caller())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(32, _3)\n                        sstore(keccak256(0, _2), _33)\n                        let _34 := and(value0_3, sub(shl(160, 1), 1))\n                        mstore(0, _34)\n                        /// @src 16:3467:3495  \"_add(_balanceOf[to], amount)\"\n                        let _35 := fun_add(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ sload(keccak256(0, _2)), /** @src 16:3467:3495  \"_add(_balanceOf[to], amount)\" */ value_6)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(0, _34)\n                        mstore(32, _3)\n                        sstore(keccak256(0, _2), _35)\n                        /// @src 16:3511:3543  \"Transfer(msg.sender, to, amount)\"\n                        let _36 := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ mload(_2)\n                        mstore(_36, value_6)\n                        /// @src 16:3511:3543  \"Transfer(msg.sender, to, amount)\"\n                        log3(_36, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 32, /** @src 16:3511:3543  \"Transfer(msg.sender, to, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 16:3420:3430  \"msg.sender\" */ caller(), /** @src 16:3511:3543  \"Transfer(msg.sender, to, amount)\" */ _34)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let memPos_9 := mload(_2)\n                        mstore(memPos_9, 1)\n                        return(memPos_9, 32)\n                    }\n                    case 0xd505accf {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 224) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let value1_2 := abi_decode_address_8758()\n                        let value_7 := calldataload(68)\n                        let value_8 := calldataload(100)\n                        let value_9 := calldataload(132)\n                        let _37 := and(value_9, 0xff)\n                        if iszero(eq(value_9, _37)) { revert(0, 0) }\n                        if /** @src 16:4404:4431  \"deadline >= block.timestamp\" */ lt(value_8, /** @src 16:4416:4431  \"block.timestamp\" */ timestamp())\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        {\n                            let memPtr_2 := mload(_2)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, _3), 32)\n                            mstore(add(memPtr_2, 36), 23)\n                            mstore(add(memPtr_2, 68), \"PERMIT_DEADLINE_EXPIRED\")\n                            revert(memPtr_2, 100)\n                        }\n                        /// @src 16:4617:4635  \"DOMAIN_SEPARATOR()\"\n                        let expr := fun_DOMAIN_SEPARATOR()\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let _38 := sub(shl(160, 1), 1)\n                        let _39 := and(value0_4, _38)\n                        mstore(0, _39)\n                        let _40 := 32\n                        mstore(_40, /** @src 16:5026:5032  \"nonces\" */ 0x08)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let dataSlot_1 := keccak256(0, _2)\n                        let _41 := sload(/** @src 16:5026:5041  \"nonces[owner]++\" */ dataSlot_1)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        if eq(_41, not(0))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 36)\n                        }\n                        sstore(dataSlot_1, add(_41, 1))\n                        /// @src 16:4692:5105  \"abi.encode(...\"\n                        let expr_mpos := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ mload(_2)\n                        /// @src 16:4692:5105  \"abi.encode(...\"\n                        let _42 := add(expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _40)\n                        mstore(_42, /** @src 16:4732:4889  \"keccak256(...\" */ 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(add(/** @src 16:4692:5105  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _2), _39)\n                        let _43 := and(value1_2, _38)\n                        mstore(add(/** @src 16:4692:5105  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 96), _43)\n                        mstore(add(/** @src 16:4692:5105  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 128), value_7)\n                        mstore(add(/** @src 16:4692:5105  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 160), _41)\n                        mstore(add(/** @src 16:4692:5105  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 192), value_8)\n                        /// @src 16:4692:5105  \"abi.encode(...\"\n                        mstore(expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 192)\n                        let newFreePtr := add(expr_mpos, 224)\n                        let _44 := 0xffffffffffffffff\n                        if or(gt(newFreePtr, _44), lt(newFreePtr, expr_mpos))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(_2, newFreePtr)\n                        /// @src 16:4657:5127  \"keccak256(...\"\n                        let expr_1 := keccak256(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _42, mload(/** @src 16:4657:5127  \"keccak256(...\" */ expr_mpos))\n                        /// @src 16:4547:5145  \"abi.encodePacked(...\"\n                        let _45 := add(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ expr_mpos, /** @src 16:4547:5145  \"abi.encodePacked(...\" */ 256)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(_45, shl(240, 6401))\n                        mstore(add(expr_mpos, 258), expr)\n                        mstore(add(expr_mpos, 290), expr_1)\n                        /// @src 16:4547:5145  \"abi.encodePacked(...\"\n                        mstore(newFreePtr, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 66)\n                        let newFreePtr_1 := add(expr_mpos, 352)\n                        if or(gt(newFreePtr_1, _44), lt(newFreePtr_1, newFreePtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(_2, newFreePtr_1)\n                        mstore(newFreePtr_1, /** @src 16:4520:5159  \"keccak256(...\" */ keccak256(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _45, mload(/** @src 16:4520:5159  \"keccak256(...\" */ newFreePtr)))\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        mstore(add(expr_mpos, 384), _37)\n                        mstore(add(expr_mpos, 416), calldataload(164))\n                        mstore(add(expr_mpos, 448), calldataload(196))\n                        /// @src 16:4497:5214  \"ecrecover(...\"\n                        mstore(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0, 0)\n                        /// @src 16:4497:5214  \"ecrecover(...\"\n                        if iszero(staticcall(gas(), /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 1, /** @src 16:4497:5214  \"ecrecover(...\" */ newFreePtr_1, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 128, 0, _40))\n                        /// @src 16:4497:5214  \"ecrecover(...\"\n                        {\n                            /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 16:5233:5263  \"recoveredAddress != address(0)\"\n                        let _46 := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ and(/** @src 16:4497:5214  \"ecrecover(...\" */ mload(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0), _38)\n                        /// @src 16:5233:5292  \"recoveredAddress != address(0) && recoveredAddress == owner\"\n                        let expr_2 := /** @src 16:5233:5263  \"recoveredAddress != address(0)\" */ iszero(iszero(_46))\n                        /// @src 16:5233:5292  \"recoveredAddress != address(0) && recoveredAddress == owner\"\n                        if expr_2\n                        {\n                            expr_2 := /** @src 16:5267:5292  \"recoveredAddress == owner\" */ eq(_46, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _39)\n                        }\n                        if iszero(expr_2)\n                        {\n                            let memPtr_3 := mload(_2)\n                            mstore(memPtr_3, shl(229, 4594637))\n                            mstore(add(memPtr_3, _3), _40)\n                            mstore(add(memPtr_3, 36), 14)\n                            mstore(add(memPtr_3, 68), \"INVALID_SIGNER\")\n                            revert(memPtr_3, 100)\n                        }\n                        mstore(0, _46)\n                        mstore(_40, /** @src 16:5322:5332  \"_allowance\" */ 0x05)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let _47 := keccak256(0, _2)\n                        mstore(0, _43)\n                        mstore(_40, _47)\n                        sstore(keccak256(0, _2), value_7)\n                        /// @src 16:5383:5414  \"Approval(owner, spender, value)\"\n                        let _48 := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ mload(_2)\n                        mstore(_48, value_7)\n                        /// @src 16:5383:5414  \"Approval(owner, spender, value)\"\n                        log3(_48, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _40, /** @src 16:5383:5414  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, _39, _43)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        return(0, 0)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        let value1_3 := abi_decode_address_8758()\n                        let _49 := sub(shl(160, 1), 1)\n                        mstore(0, and(value0_5, _49))\n                        mstore(32, /** @src 16:1659:1669  \"_allowance\" */ 0x05)\n                        /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                        let _50 := keccak256(0, _2)\n                        mstore(0, and(value1_3, _49))\n                        mstore(32, _50)\n                        let _51 := sload(keccak256(0, _2))\n                        let memPos_10 := mload(_2)\n                        mstore(memPos_10, _51)\n                        return(memPos_10, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_8758() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                array := memPtr\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function abi_encode_string_storage(pos) -> ret\n            {\n                let slotValue := sload(0)\n                let length := extract_byte_array_length(slotValue)\n                mstore(pos, length)\n                let _1 := 0x20\n                let _2 := 1\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(pos, 0x20), and(slotValue, not(255)))\n                    ret := add(add(pos, shl(5, iszero(iszero(length)))), 0x20)\n                }\n                case 1 {\n                    mstore(0, 0)\n                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, _1) }\n                    {\n                        mstore(add(add(pos, i), _1), sload(dataPos))\n                        dataPos := add(dataPos, _2)\n                    }\n                    ret := add(add(pos, i), 0x20)\n                }\n            }\n            /// @ast-id 22613 @src 16:5427:5605  \"function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {...\"\n            function fun_DOMAIN_SEPARATOR() -> var\n            {\n                /// @src 16:5510:5544  \"_pureChainId() == INITIAL_CHAIN_ID\"\n                let expr := eq(/** @src 16:7884:7937  \"assembly {...\" */ chainid(), /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ sload(/** @src 16:5528:5544  \"INITIAL_CHAIN_ID\" */ 0x06))\n                /// @src 16:5510:5598  \"_pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator()\"\n                let expr_1 := /** @src -1:-1:-1 */ 0\n                /// @src 16:5510:5598  \"_pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator()\"\n                switch expr\n                case 0 {\n                    expr_1 := /** @src 16:5574:5598  \"computeDomainSeparator()\" */ fun_computeDomainSeparator()\n                }\n                default /// @src 16:5510:5598  \"_pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator()\"\n                {\n                    expr_1 := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ sload(/** @src 16:5547:5571  \"INITIAL_DOMAIN_SEPARATOR\" */ 0x07)\n                }\n                /// @src 16:5503:5598  \"return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator()\"\n                var := expr_1\n            }\n            /// @ast-id 22643 @src 16:5611:6015  \"function computeDomainSeparator() internal view virtual returns (bytes32) {...\"\n            function fun_computeDomainSeparator() -> var_\n            {\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, sub(abi_encode_string_storage(memPtr), memPtr))\n                /// @src 16:5866:5889  \"keccak256(bytes(_name))\"\n                let expr := keccak256(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ add(/** @src 16:5866:5889  \"keccak256(bytes(_name))\" */ memPtr, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0x20), mload(/** @src 16:5866:5889  \"keccak256(bytes(_name))\" */ memPtr))\n                /// @src 16:5725:5998  \"abi.encode(...\"\n                let expr_mpos := /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ mload(64)\n                /// @src 16:5725:5998  \"abi.encode(...\"\n                let _1 := add(expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0x20)\n                mstore(_1, /** @src 16:5753:5848  \"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\" */ 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                mstore(add(/** @src 16:5725:5998  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 64), expr)\n                mstore(add(/** @src 16:5725:5998  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 96), /** @src 16:5907:5921  \"keccak256(\\\"1\\\")\" */ 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6)\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                mstore(add(/** @src 16:5725:5998  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 128), /** @src 16:7884:7937  \"assembly {...\" */ chainid())\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                mstore(add(/** @src 16:5725:5998  \"abi.encode(...\" */ expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 160), /** @src 16:5979:5983  \"this\" */ address())\n                /// @src 16:5725:5998  \"abi.encode(...\"\n                mstore(expr_mpos, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 160)\n                let newFreePtr := add(expr_mpos, 192)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, expr_mpos))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n                /// @src 16:5695:6008  \"return keccak256(...\"\n                var_ := /** @src 16:5702:6008  \"keccak256(...\" */ keccak256(/** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ _1, mload(/** @src 16:5702:6008  \"keccak256(...\" */ expr_mpos))\n            }\n            /// @ast-id 22759 @src 16:7038:7192  \"function _sub(uint256 a, uint256 b) internal pure returns (uint256) {...\"\n            function fun_sub(var_a, var_b) -> var\n            {\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                if /** @src 16:7124:7130  \"a >= b\" */ lt(var_a, var_b)\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 28)\n                    mstore(add(memPtr, 68), \"ERC20: subtraction underflow\")\n                    revert(memPtr, 100)\n                }\n                let diff := sub(var_a, var_b)\n                if gt(diff, var_a)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0x24)\n                }\n                /// @src 16:7173:7185  \"return a - b\"\n                var := diff\n            }\n            /// @ast-id 22738 @src 16:6859:7032  \"function _add(uint256 a, uint256 b) internal pure returns (uint256) {...\"\n            function fun_add(var_a, var_b) -> var\n            {\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                let sum := add(var_a, var_b)\n                if gt(var_a, sum)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 16:369:8319  \"contract MockERC20 is IERC20 {...\" */ 0x24)\n                }\n                if /** @src 16:6972:6978  \"c >= a\" */ lt(sum, var_a)\n                /// @src 16:369:8319  \"contract MockERC20 is IERC20 {...\"\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 24)\n                    mstore(add(memPtr, 68), \"ERC20: addition overflow\")\n                    revert(memPtr, 100)\n                }\n                /// @src 16:7017:7025  \"return c\"\n                var := sum\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220fa095d9699cd21753448619b23e0700ecda082e4b00846a406882760a91b3ea664736f6c63430008180033\"\n    }\n}\n","hash":"010001cd99fc78b7bb5d371286676eece3962a4ae0313d53e3b33b62ead405de","factoryDependencies":{},"id":16}